// Define the plugins needed for this build
plugins {
    id 'java' // Provides basic functionalities to build Java applications
    id 'application' // Supports building and running applications
    id 'org.javamodularity.moduleplugin' version '1.8.12' // Helps in building Java 9+ modules
    id 'org.openjfx.javafxplugin' version '0.0.14' // Provides support for building JavaFX applications
    id 'org.beryx.jlink' version '2.25.0' // Helps in creating custom Java runtime images
    id 'com.github.johnrengelman.shadow' version '8.0.0' // Used to create an uber JAR or fat JAR of the project
    id 'maven-publish' // Enables publication of build artifacts to Maven repositories
    id 'signing' // Enables the ability to create and configure digital signatures for artifacts
}

// Set the group ID and version number for this project
group = 'eu.lilithmonodia'
version = '0.6'

// Indicate where Gradle should look for dependencies
repositories {
    mavenCentral() // Gradle should use the central Maven repository for dependencies
}

// Define the extra properties needed for the build
ext {
    junitVersion = '5.9.2' // Specifies the version of JUnit to use
}

// Set the Java compatibility versions
sourceCompatibility = '17' // Specifies that the source code is written using Java 17
targetCompatibility = '17' // Specifies that the bytecode should be compatible with Java 17

// Configures all JavaCompile tasks to use UTF-8 encoding
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' // Sets file encoding to UTF-8
}

// Define the dependencies of the project
dependencies {
    // Indicate libraries the project needs to compile and run
    implementation 'org.jetbrains:annotations:24.0.0'
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    // Indicate libraries needed for testing this project
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

// Configures the `jar` task to include the main class in the manifest file
jar {
    manifest {
        attributes('Main-Class': 'eu.lilithmonodia.winestock.Launcher')
    }
}

// Defines how the application should be launched
application {
    mainModule = 'eu.lilithmonodia.winestock'
    mainClass = 'eu.lilithmonodia.winestock.Launcher'
}

// Configures the JavaFX plugin
javafx {
    version = '17.0.7' // Sets JavaFX version
    modules = ['javafx.controls', 'javafx.fxml'] // Specifies the JavaFX modules to be used
}

// Configures the `test` task to use the JUnit platform
test {
    useJUnitPlatform()
}

// Configures the `jlink` task to create a custom Java runtime image
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--add-modules', 'org.apache.logging.log4j']
    forceMerge 'log4j'
    launcher { name = 'WineStock' }
}

// Configure the `shadowJar` task to create a fat JAR of this project
shadowJar {
    archiveBaseName.set('WineStock')
    archiveVersion.set("${version}")
    archiveClassifier.set('shadow')
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'eu.lilithmonodia.winestock.Launcher'
    }
    configurations = [project.configurations.runtimeClasspath]
}

// Create tasks for generating Javadoc and source Jar
task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

afterEvaluate {
    signing {
        sign publishing.publications.mavenJava
    }
}

// Artifacts to be produced by the build
artifacts {
    archives javadocJar, sourcesJar, jar, shadowJar
}

// Configure publishing to publish to OSSRH or Sonatype
publishing {
    repositories {
        maven {
            name = "OSSRH" // Setting repository name
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
            // Maven repository URL where the artifacts will be published
            credentials {
                // The Maven credentials for publishing are pulled from environment variables
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar // Specifies that the source code should be published
            artifact javadocJar // Specifies that the Javadoc should be published

            // Configuration to generate a Project Object Model (POM) file for publishing
            pom {
                name = 'WineStock'
                packaging 'jar'
                description = 'WineStock is a JavaFX application for managing wine inventory using a PostgreSQL database. It supports viewing and managing wine details.'
                url = 'https://github.com/Monodia3007/WineStock'

                // Source code management related information
                scm {
                    connection = 'scm:git:https://github.com/Monodia3007/WineStock.git'
                    developerConnection = 'scm:git:https://github.com/Monodia3007/WineStock.git'
                    url = 'https://github.com/Monodia3007/WineStock'
                }

                // Licencing details for the project
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/license/mit/'
                    }
                }

                // Developer contact details
                developers {
                    developer {
                        id = 'monodia'
                        name = 'Lilith Camplin'
                        email = 'lilith.camplin@gmail.com'
                    }
                }
            }
        }
    }
}